type Topic = text;
type Message = text;
type PhoneNumber = text;
type Token = text;
type Error = text;

type MessageHttpResponse = record {
    status_code: nat16;
    body: opt vec Message;
};

type BoolHttpResponse = record {
    data: opt bool;
    error: opt Error;
    status_code: nat16;
};

type EmptyHttpResponse = record {
     data: opt text;
     error: opt Error;
     status_code: nat16;
 };

type Account = record {
    principal_id: text;
    name: text;
    phone_number: text;
    email: text;
    devices: vec Device;
    personas: vec Persona;
};

type HTTPAccountResponse = record {
    data: opt Account;
    error: opt Error;
    status_code: nat16;
};

type HTTPAccountRequest = record {
    name: text;
    phone_number: text;
    email: text;
};

type HTTPAccountUpdateRequest = record {
    name: opt text;
    phone_number: opt text;
    email: opt text;
};

type Device = record {
    pub_key_hash: text;
    last_used: text;
    make: text;
    model: text;
    browser: text;
};

type HTTPDeviceResponse = record {
    data: opt vec Device;
    error: opt Error;
    status_code: nat16;
};

type Persona = record {
    name: text;
    is_root: bool;
    is_seed_phrase_copied: bool;
    is_ii_anchor: bool;
    anchor: text;
    principal_id: text;
};

type HTTPPersonaUpdateRequest = record {
    name: opt text;
    is_root: opt bool;
    is_seed_phrase_copied: opt bool;
    is_ii_anchor: opt bool;
    anchor: opt text;
    principal_id: text;
};

type HTTPPersonasResponse = record {
    data: opt vec Persona;
    error: opt Error;
    status_code: nat16;
};


service : () -> {
  get_account: () -> (HTTPAccountResponse) query;
  create_account: (HTTPAccountRequest) -> (HTTPAccountResponse);
  update_account: (HTTPAccountUpdateRequest) -> (HTTPAccountResponse);

  create_persona: (Persona) -> (HTTPAccountResponse);
  update_persona: (HTTPPersonaUpdateRequest) -> (HTTPAccountResponse);
  read_personas: () -> (HTTPPersonasResponse);

  create_device: (Device) -> (BoolHttpResponse);
  read_devices: () -> (HTTPDeviceResponse);

  verify_phone_number: (PhoneNumber) -> (BoolHttpResponse);
  verify_token: (PhoneNumber, Token) -> (BoolHttpResponse);
  post_token: (PhoneNumber, Token) -> (BoolHttpResponse);

  post_messages: (Topic, vec Message) -> (MessageHttpResponse);
  get_messages: (Topic) -> (MessageHttpResponse);
  create_topic: (Topic) -> (MessageHttpResponse);
  delete_topic: (Topic) -> (MessageHttpResponse);
}
