type Token = text;
type Domain = text;
type Name = text;
type Error = text;

type ConfigurationRequest = record {
    lambda: principal;
    token_ttl: nat64;
    token_refresh_ttl: nat64;
    key: blob;
    whitelisted_phone_numbers: opt vec text;
};

type BoolHttpResponse = record {
    data: opt bool;
    error: opt Error;
    status_code: nat16;
};

type Response = record {
    error: opt Error;
    status_code: nat16;
};

type EmptyHttpResponse = record {
     data: opt text;
     error: opt Error;
     status_code: nat16;
 };

type AccountResponse = record {
    anchor: nat64;
    principal_id: text;
    name: opt text;
    phone_number: opt text;
    personas: vec PersonaVariant;
};

type HTTPAccountResponse = record {
    data: opt AccountResponse;
    error: opt Error;
    status_code: nat16;
};

type HTTPAccountRequest = record {
    anchor: nat64;
};

type HTTPAccountUpdateRequest = record {
    name: opt text;
};

type Application = record {
    name: text;
    domain: text;
    user_limit: nat16;
};

type HTTPApplicationResponse = record {
    data: opt vec Application;
    error: opt Error;
    status_code: nat16;
};

type PersonaVariant = variant {
  nfid_persona: PersonaNFIDResponse;
  ii_persona: PersonaIIResponse
};

type PersonaNFIDResponse = record {
    persona_id: text;
    domain: text;
};

type PersonaIIResponse = record {
    anchor: nat64;
    domain: text;
};

type HTTPPersonasResponse = record {
    data: opt vec PersonaVariant;
    error: opt Error;
    status_code: nat16;
};

type TokenRequest = record {
    phone_number: text;
    token: text;
    principal_id: text;
};

type ValidatePhoneRequest = record {
    phone_number: text;
    principal_id: text;
};

type LogLevel = variant {
    ERROR;
    INFO;
};

type Log = record {
    log: text;
    level: LogLevel;
    timestamp: nat64;
};

service : () -> {
  configure: (ConfigurationRequest) -> ();
  get_account: () -> (HTTPAccountResponse) query;
  create_account: (HTTPAccountRequest) -> (HTTPAccountResponse);
  remove_account: () -> (BoolHttpResponse);
  update_account: (HTTPAccountUpdateRequest) -> (HTTPAccountResponse);

  create_persona: (PersonaVariant) -> (HTTPAccountResponse);
  read_personas: () -> (HTTPPersonasResponse);

  validate_phone: (ValidatePhoneRequest) -> (Response);
  post_token: (TokenRequest) -> (Response);
  verify_token: (Token) -> (Response);

  create_application: (Application) -> (HTTPApplicationResponse);
  delete_application: (Name) -> (BoolHttpResponse);
  read_applications: () -> (HTTPApplicationResponse) query;
  is_over_the_application_limit: (Domain) -> (BoolHttpResponse) query;

  get_logs: (nat64) -> (vec Log);
  get_all_logs: () -> (vec Log);

}
