type PhoneNumber = text;
type Token = text;
type Error = text;

type Configuration = record {
    lambda: principal;
    token_ttl: nat64;
    key: blob;
};

type BoolHttpResponse = record {
    data: opt bool;
    error: opt Error;
    status_code: nat16;
};

type EmptyHttpResponse = record {
     data: opt text;
     error: opt Error;
     status_code: nat16;
 };

type AccountResponse = record {
    anchor: nat64;
    principal_id: text;
    name: text;
    phone_number: text;
    devices: vec Device;
    personas: vec PersonaVariant;
};

type HTTPAccountResponse = record {
    data: opt AccountResponse;
    error: opt Error;
    status_code: nat16;
};

type HTTPAccountRequest = record {
    anchor: nat64;
    name: text;
    phone_number: text;
    token: text;
};

type HTTPAccountUpdateRequest = record {
    name: opt text;
};

type Device = record {
    pub_key_hash: text;
    last_used: text;
    make: text;
    model: text;
    browser: text;
};

type HTTPDeviceResponse = record {
    data: opt vec Device;
    error: opt Error;
    status_code: nat16;
};

type PersonaVariant = variant {
  nfid_persona: PersonaNFIDResponse;
  ii_persona: PersonaIIResponse
};

type PersonaNFIDResponse = record {
    persona_id: text;
    domain: text;
};

type PersonaIIResponse = record {
    anchor: nat64;
    domain: text;
};

type HTTPPersonasResponse = record {
    data: opt vec PersonaVariant;
    error: opt Error;
    status_code: nat16;
};

type HTTPVerifyPhoneNumberRequest = record {
    phone_number: text;
    token: text;
};

service : () -> {
  configure: (Configuration) -> ();
  get_account: () -> (HTTPAccountResponse) query;
  create_account: (HTTPAccountRequest) -> (HTTPAccountResponse);
  update_account: (HTTPAccountUpdateRequest) -> (HTTPAccountResponse);

  create_persona: (PersonaVariant) -> (HTTPAccountResponse);
  read_personas: () -> (HTTPPersonasResponse);

  create_device: (Device) -> (BoolHttpResponse);
  read_devices: () -> (HTTPDeviceResponse);

  post_token: (HTTPVerifyPhoneNumberRequest) -> (BoolHttpResponse);
  validate_phone_number: (PhoneNumber) -> (BoolHttpResponse) query;
}
