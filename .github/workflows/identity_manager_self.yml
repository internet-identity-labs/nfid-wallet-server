name: SH - Identity Manager
on: 
  workflow_dispatch:
    inputs:
      network_name:
        description: 'Choose applicable network'
        required: true
        type: choice
        options: 
          - dev
          - stage
          - ic
      canister_name:
        description: 'Choose applicable canister'
        required: true
        type: choice
        options:
          - identity_manager_test_replica
          - identity_manager
          - test_im
      debug_messages:
        description: 'Show debug messages'
        type: choice
        options: 
          - 'false'
          - 'true'
      confirmation:
        description: 'For the ic deployment - confirm your choice by typing "Yes"'
        type: string

env:
  NETWORK_NAME: ${{ github.event.inputs.network_name }}
  CANISTER_NAME: ${{ github.event.inputs.canister_name }}
  CI_DEBUG: ${{ github.event.inputs.debug_messages }}


jobs:
  Deploy:
    runs-on:
      group: dfx-runner
    defaults:
      run:
        shell: bash

    steps:
      - name: INPUT => Checks.
        if: ${{ (github.event.inputs.network_name == 'ic') && (github.event.inputs.confirmation != 'Yes') }}
        run: |
          echo "[ERROR] You have try release to network 'ic' without or with wrong confirmation phrase" >&2
          exit 1

      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Checkout CI repo.
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Cache Cargo dependencies.
        uses: actions/cache@v3
        with:
          path: |
            /home/ubuntu/.cargo/registry/
            /home/ubuntu/.cargo_target/
            src/eth_secret_storage/target/
            src/identity_manager/target/
            src/bitcoin/target/
            target/
          key: ${{ runner.os }}-cargo-im

      - name: Versions
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh
          
          ci_versions

      - name: PRE-BUILD => Populate env vars.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          ci_echo_debug "Getting values from dfx.json" >&2
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}"); then
            ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          ci_echo_debug "Getting dfx identity for network '${NETWORK_NAME}'" >&2

          if [[ "${NETWORK_NAME}" =~ ^(dev|stage)$ ]]; then
            ID_NAME="dev_admin"
            IDENTITY_PEM_NAME_VAR="DEV_ADMIN_KEY"
          elif [ "${NETWORK_NAME}" == 'ic' ]; then
            ID_NAME="prod_admin"
            IDENTITY_PEM_NAME_VAR="PROD_ADMIN_KEY"
          fi
          ID_PATH="/home/ubuntu/.config/dfx/identity/${ID_NAME}"

          ci_echo_debug "Populating env variables" >&2
          CANISTER_DID="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.candid")"
          CANISTER_WASM="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.wasm")"
          CANISTER_BRANCH="${GITHUB_REF_NAME////-}"
            
          echo "CANISTER_DID=${CANISTER_DID}" >> $GITHUB_ENV
          echo "CANISTER_WASM=${CANISTER_WASM}" >> $GITHUB_ENV
          echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV
          echo "ID_NAME=${ID_NAME}" >> $GITHUB_ENV
          echo "ID_PATH=${ID_PATH}" >> $GITHUB_ENV
          echo "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >> $GITHUB_ENV

      - name: PRE-BUILD => Print Vars.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh
          ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
          ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
          ci_echo_info "CANISTER_DID=${CANISTER_DID}" >&2
          ci_echo_info "CANISTER_WASM=${CANISTER_WASM}" >&2
          ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
          ci_echo_info "ID_NAME=${ID_NAME}" >&2
          ci_echo_info "ID_PATH=${ID_PATH}" >&2
          ci_echo_info "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >&2

      - name: PRE-BUILD => Write identity.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          mkdir -p "${ID_PATH}"
          echo "${!IDENTITY_PEM_NAME_VAR}" > "${ID_PATH}/identity.pem"
          sed -i 's/\\r\\n/\r\n/g' "${ID_PATH}/identity.pem"
        env:
          DEV_ADMIN_KEY: ${{secrets.DEV_ADMIN_KEY}}
          PROD_ADMIN_KEY: ${{secrets.PROD_ADMIN_KEY}}

      - name: BUILD => Show current configuration.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          dfx identity use "${ID_NAME}"

          ci_echo_debug "dfx canister --network '${NETWORK_NAME}' call '${CANISTER_NAME}' get_config" >&2
          dfx canister --network "${NETWORK_NAME}" call "${CANISTER_NAME}" get_config

      - name: BUILD => Build the canister.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          dfx identity use "${ID_NAME}"

          rm -rf .dfx;
          ci_echo_debug "dfx build --network '${NETWORK_NAME}' '${CANISTER_NAME}'" >&2
          dfx build --network "${NETWORK_NAME}" "${CANISTER_NAME}"

      - name: DEPLOY PROD => Upgrade the identity_manager_replica canister.
        if: ${{ (github.event.inputs.canister_name == 'identity_manager') && (github.event.inputs.network_name == 'ic') }}
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          dfx identity use "${ID_NAME}"

          CI_DEBUG="true"

          ci_echo_debug "dfx build --network '${NETWORK_NAME}' 'identity_manager_replica'" >&2
          if ! result_build=$(dfx build --network "${NETWORK_NAME}" "identity_manager_replica"); then
            ci_echo_error "Build identity_manager_replica failed ${result_build}" >&2
            exit 1
          fi

          ci_echo_debug "dfx canister --network '${NETWORK_NAME}' install --mode upgrade 'identity_manager_replica'" >&2
          if ! result=$(dfx canister --network "${NETWORK_NAME}" install --mode upgrade "identity_manager_replica"); then
            ci_echo_error "Upgrade failed ${result}" >&2
            exit 1
          fi

          ci_echo_debug "Command output was '${result}'" >&2

          # If hash the same - than fail deploy
          if echo "${result}" | grep -q 'Module hash [[:alnum:]]+ is already installed'; then
            ci_echo_error "${result}" >&2
            exit 1
          fi

          ci_echo_success "Canister 'identity_manager_replica' was upgraded" >&2

      - name: DEPLOY PROD => Send configuration to the identity_manager_replica canister.
        if: ${{ (github.event.inputs.canister_name == 'identity_manager') && (github.event.inputs.network_name == 'ic') }}
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          dfx identity use "${ID_NAME}"

          CI_DEBUG="true"

          CANISTER_DATA_NAME_VAR="CANISTER_CONFIG_TEST_DATA"

          CANISTER_DATA="$(sed "s/PLACEHOLDER_GITHUB_REF_NAME/${CANISTER_BRANCH}/" <<< "${!CANISTER_DATA_NAME_VAR}" | sed "s/PLACEHOLDER_GITHUB_SHA/${GITHUB_SHA}/")"

          ci_echo_debug "dfx canister --network '${NETWORK_NAME}' call 'identity_manager_replica' configure '${CANISTER_DATA}'" >&2
          if ! result=$(dfx canister --network "${NETWORK_NAME}" call "identity_manager_replica" configure "${CANISTER_DATA}"); then
            ci_echo_error "Configure failed ${result}" >&2
            exit 1
          fi

          ci_echo_debug "Command output was '${result}'" >&2

          # If '()' not found - than fail
          if ! echo "${result}" | grep -q '()'; then
            ci_echo_error "${result}" >&2
            exit 1
          fi
          
          ci_echo_success "${result}" >&2
        env:
          CANISTER_CONFIG_TEST_DATA: >-
            (
                record {
                    lambda_url = opt "https://d8m9ttp390ku4.cloudfront.net/prod";
                    lambda = opt principal "mltzx-rlg5h-qzcpp-xdp7e-56vnr-cbdjf-e6x5q-gzm2d-2soup-wtk5n-5qe";
                    whitelisted_canisters = opt vec {principal "bryxc-zqaaa-aaaal-aajga-cai"};
                    git_branch = opt "PLACEHOLDER_GITHUB_REF_NAME";
                    commit_hash = opt "PLACEHOLDER_GITHUB_SHA";
                }
            )

      - name: TEST PROD => Get Account from the identity_manager_replica canister.
        if: ${{ (github.event.inputs.canister_name == 'identity_manager') && (github.event.inputs.network_name == 'ic') }}
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          dfx identity use "${ID_NAME}"

          CI_DEBUG="true"

          ci_echo_debug "dfx canister --network '${NETWORK_NAME}' call 'identity_manager_replica' get_account" >&2
          if ! result=$(dfx canister --network "${NETWORK_NAME}" call "identity_manager_replica" get_account) || [ -z "${result}" ]; then
            ci_echo_error "Test failed - call to canister unsuccessful" >&2
            exit 1
          fi

          ci_echo_debug "Command output was '${result}'" >&2

          # If 'anchor' not found - than fail
          if ! echo "${result}" | grep -q 'anchor'; then
            ci_echo_error "Test failed - 'anchor' - was not found" >&2
            exit 1
          fi

          ci_echo_success "${result}" >&2

      - name: DEPLOY => Upgrade the canister.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          dfx identity use "${ID_NAME}"

          if [ "${NETWORK_NAME}" == 'ic' ] && [ "${CANISTER_NAME}" == 'identity_manager' ]; then
            ci_echo_warn "Performing PROD canister Upgrade" >&2
            CI_DEBUG="true"
          fi

          ci_echo_debug "dfx canister --network '${NETWORK_NAME}' install --mode upgrade '${CANISTER_NAME}'" >&2
          if ! result=$(dfx canister --network "${NETWORK_NAME}" install --mode upgrade "${CANISTER_NAME}"); then
            ci_echo_error "Upgrade failed ${result}" >&2
            exit 1
          fi

          ci_echo_debug "Command output was '${result}'" >&2

          # If hash the same - than fail deploy
          if echo "${result}" | grep -q 'Module hash [[:alnum:]]+ is already installed'; then
            ci_echo_error "${result}" >&2
            exit 1
          else
            ci_echo_success "Canister '${CANISTER_NAME}' was upgraded" >&2
          fi

      - name: DEPLOY => Send configuration to the canister.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          dfx identity use "${ID_NAME}"

          if [ "${NETWORK_NAME}" == 'ic' ] && [ "${CANISTER_NAME}" == 'identity_manager' ]; then
            ci_echo_warn "Performing PROD config Update" >&2
            CI_DEBUG="true"
            CANISTER_DATA_NAME_VAR="CANISTER_CONFIG_PROD_DATA"
          else
            CANISTER_DATA_NAME_VAR="CANISTER_CONFIG_DATA"
          fi

          CANISTER_DATA_NAME_VAR="CANISTER_CONFIG_DATA"

          if [ "${CANISTER_NAME}" == 'identity_manager' ]; then
            case ${NETWORK_NAME} in
              ic )
                ci_echo_warn "Performing PROD config Update" >&2
                CI_DEBUG="true"
                CANISTER_DATA_NAME_VAR="CANISTER_CONFIG_PROD_DATA"
                ;;
              stage)
                ci_echo_warn "Performing STAGE config Update" >&2
                CANISTER_DATA_NAME_VAR="CANISTER_CONFIG_STAGE_DATA"
                ;;
              *)
                ci_echo_info "Performing DEV config Update" >&2
                CANISTER_DATA_NAME_VAR="CANISTER_CONFIG_DATA"
                ;;
            esac
          fi
          
          # Sync command
          ci_echo_info "Synching controllers for the canister." >&2
          ci_echo_debug "dfx canister --network '${NETWORK_NAME}' call '${CANISTER_NAME}' sync_controllers" >&2
          if ! result=$(dfx canister --network "${NETWORK_NAME}" call "${CANISTER_NAME}" sync_controllers); then
            ci_echo_warn "Synching controllers failed ${result}" >&2
          fi

          ci_echo_success "${result}" >&2

          CANISTER_DATA="$(sed "s/PLACEHOLDER_GITHUB_REF_NAME/${CANISTER_BRANCH}/" <<< "${!CANISTER_DATA_NAME_VAR}" | sed "s/PLACEHOLDER_GITHUB_SHA/${GITHUB_SHA}/")"

          # Configure command
          ci_echo_debug "dfx canister --network '${NETWORK_NAME}' call '${CANISTER_NAME}' configure '${CANISTER_DATA}'" >&2
          if ! result=$(dfx canister --network "${NETWORK_NAME}" call "${CANISTER_NAME}" configure "${CANISTER_DATA}"); then
            ci_echo_error "Configure failed ${result}" >&2
            exit 1
          fi

          ci_echo_debug "Command output was '${result}'" >&2

          # If '()' not found - than fail
          if ! echo "${result}" | grep -q '()'; then
            ci_echo_error "${result}" >&2
            exit 1
          fi
          
          ci_echo_success "${result}" >&2
        env:
          CANISTER_CONFIG_DATA: >-
            (
              record {
                lambda_url = opt "https://d8m9ttp390ku4.cloudfront.net/dev";
                ii_canister_id = opt principal "nprnb-waaaa-aaaaj-qax4a-cai";
                lambda = opt principal "mltzx-rlg5h-qzcpp-xdp7e-56vnr-cbdjf-e6x5q-gzm2d-2soup-wtk5n-5qe";
                git_branch = opt "PLACEHOLDER_GITHUB_REF_NAME";
                commit_hash = opt "PLACEHOLDER_GITHUB_SHA";
                whitelisted_canisters = opt vec { principal "gzqxf-kqaaa-aaaak-qakba-cai" };
              }
            )
          CANISTER_CONFIG_STAGE_DATA: >-
              (
                record {
                  lambda_url = opt "https://d8m9ttp390ku4.cloudfront.net/staging";
                  ii_canister_id = opt principal "rdmx6-jaaaa-aaaaa-aaadq-cai";
                  lambda = opt principal "mltzx-rlg5h-qzcpp-xdp7e-56vnr-cbdjf-e6x5q-gzm2d-2soup-wtk5n-5qe";
                  git_branch = opt "PLACEHOLDER_GITHUB_REF_NAME";
                  commit_hash = opt "PLACEHOLDER_GITHUB_SHA";
                  whitelisted_canisters = opt vec { principal "gzqxf-kqaaa-aaaak-qakba-cai" };
                }
              )
          CANISTER_CONFIG_PROD_DATA: >-
            (
              record {
                lambda_url = opt "https://d8m9ttp390ku4.cloudfront.net/prod";
                ii_canister_id = opt principal "rdmx6-jaaaa-aaaaa-aaadq-cai";
                lambda = opt principal "mltzx-rlg5h-qzcpp-xdp7e-56vnr-cbdjf-e6x5q-gzm2d-2soup-wtk5n-5qe";
                heartbeat = opt 900;
                backup_canister_id = opt "bv5d4-nyaaa-aaaap-qaaba-cai";
                git_branch = opt "PLACEHOLDER_GITHUB_REF_NAME";
                commit_hash = opt "PLACEHOLDER_GITHUB_SHA";
                whitelisted_canisters = opt vec { principal "sgk26-7yaaa-aaaan-qaovq-cai" };
              }
            )

      - name: DEPLOY => Rebuild device index.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          dfx identity use "${ID_NAME}"

          # Rebuild device index command
          ci_echo_info "Rebuild device index." >&2

          ci_echo_debug "dfx canister --network '${NETWORK_NAME}' call '${CANISTER_NAME}' save_temp_stack_to_rebuild_device_index" >&2
          if ! result=$(dfx canister --network "${NETWORK_NAME}" call "${CANISTER_NAME}" save_temp_stack_to_rebuild_device_index); then
            ci_echo_warn "The operation of saving device index data to temp stack has been failed: ${result}" >&2
          fi

          ci_echo_success "${result}" >&2

          remaining_amount=1
          cycles_limit=180
          cycle=1
          while [ ${remaining_amount} -gt 0 ] && [ ${cycle} -lt ${cycles_limit} ]; do
            ci_echo_info "Cycle '${cycle}' of  '${cycles_limit}'" >&2
            
            result=''

            ci_echo_debug "dfx canister --network '${NETWORK_NAME}' call '${CANISTER_NAME}' get_remaining_size_after_rebuild_device_index_slice_from_temp_stack" >&2
            if ! result=$(dfx canister --network "${NETWORK_NAME}" call "${CANISTER_NAME}" get_remaining_size_after_rebuild_device_index_slice_from_temp_stack) || [ -z "${result}" ]; then
              ci_echo_warn "The operation of rebuilding device index slice has been failed: ${result}" >&2
              break
            fi

            ci_echo_debug "${result}" >&2

            # Cleaning result output
            cleaned_string="$(echo ${result#(} | cut -d' ' -f 1)"
            cleaned_string="${cleaned_string//_/}"
            remaining_amount=$((cleaned_string))

            ci_echo_info "Index rebuild is in progress, amount of remaining entries: '${remaining_amount}'" >&2
            cycle=$((cycle + 1))
          done

          if [ ${remaining_amount} -gt 0 ]; then
            ci_echo_error "Index rebuild is not finished, amount of remaining entries: '${remaining_amount}'" >&2
            exit 1
          fi
          
          ci_echo_success "Index rebuild has been completed." >&2

      - name: Save artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CANISTER_WASM }}
          path: ${{ github.workspace }}/${{ env.CANISTER_WASM }}
