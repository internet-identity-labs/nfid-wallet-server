name: Signer IC
on:
  workflow_dispatch:
    inputs:
      network_name:
        description: 'Choose applicable network'
        required: true
        type: choice
        options: 
          - dev
          - stage
          - ic
      confirmation:
        description: 'For the ic deployment - confirm your choice by typing "Yes"'
        type: string

env:
  NETWORK_NAME: ${{ github.event.inputs.network_name }}
  CANISTER_NAME: signer_ic
  CI_DEBUG: 'true'


jobs:
  build-deploy:
    name: Build and Deploy
    environment: ${{ github.event.inputs.network_name }}
    runs-on:
      group: dfx-runner
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Checkout CI repo.
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: INPUT => Checks branch and network_name
        if: ${{ env.NETWORK_NAME == 'ic' }}
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          if [ "${{ github.event.inputs.confirmation }}" != 'Yes' ]; then
            ci_echo_error "You have try release to network 'ic' without or with wrong confirmation phrase." >&2
            exit 1
          fi

          ci_echo_success "${GITHUB_REF_TYPE} : ${GITHUB_REF_NAME}"

      - name: Cache Cargo dependencies.
        uses: actions/cache@v4
        with:
          path: |
            ${HOME}/.cargo/registry/
            ${HOME}/.cargo_target/
            src/**/target/
            target/
          key: cargo-signer

      - name: Versions
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"
          
          ci_versions

      - name: PRE-BUILD => Populate env vars.
        env:
          DFX_ID_NAME: ${{ vars.DFX_ID_NAME }}
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          ci_echo_debug "Getting values from dfx.json" >&2
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.\"${CANISTER_NAME}\""); then
            ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          ci_echo_debug "Populating env variables" >&2
          CANISTER_DID="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.candid")"
          CANISTER_WASM="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.wasm")"
          CANISTER_BRANCH="${GITHUB_REF_NAME////-}"

          ci_echo_debug "Getting dfx identity for network '${NETWORK_NAME}'" >&2
          DFX_ID_PATH="${HOME}/.config/dfx/identity/${DFX_ID_NAME}"

          echo "DFX_ID_NAME=${DFX_ID_NAME}" >> $GITHUB_ENV
          echo "DFX_ID_PATH=${DFX_ID_PATH}" >> $GITHUB_ENV

          echo "CANISTER_DID=${CANISTER_DID}" >> $GITHUB_ENV
          echo "CANISTER_WASM=${CANISTER_WASM}" >> $GITHUB_ENV
          echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV

      - name: PRE-BUILD => Print Vars.
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"
          ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
          ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
          ci_echo_info "CANISTER_DID=${CANISTER_DID}" >&2
          ci_echo_info "CANISTER_WASM=${CANISTER_WASM}" >&2
          ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
          ci_echo_info "DFX_ID_NAME=${DFX_ID_NAME}" >&2
          ci_echo_info "DFX_ID_PATH=${DFX_ID_PATH}" >&2

      - name: PRE-BUILD => Write identity.
        env:
          DFX_ID_KEY: ${{ secrets.DFX_ID_KEY }}
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          mkdir -p "${DFX_ID_PATH}"

          ci_echo_warn "Preparing encoded key..." >&2
          echo "${DFX_ID_KEY}" | base64 -d > "${DFX_ID_PATH}/identity.pem"

      - name: BUILD => Build the canister.
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          dfx identity use "${DFX_ID_NAME}"

          rm -rf .dfx;
          ci_echo_debug "dfx build --network '${NETWORK_NAME}' '${CANISTER_NAME}'" >&2
          dfx build --network "${NETWORK_NAME}" "${CANISTER_NAME}"

      - name: Save artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CANISTER_WASM }}
          include-hidden-files: true
          path: ${{ github.workspace }}/${{ env.CANISTER_WASM }}

      - name: DEPLOY => Upgrade the canister.
        run: |
          source "${{ github.workspace }}/ci_libs/CI_LIBS.sh"

          if [ "${NETWORK_NAME}" == 'ic' ]; then
            CI_DEBUG="true"
          fi

          dfx identity use "${DFX_ID_NAME}"

          ci_echo_debug "dfx canister install --network '${NETWORK_NAME}' --mode upgrade '${CANISTER_NAME}'" >&2
          if ! result=$(dfx canister install --network "${NETWORK_NAME}" --mode upgrade "${CANISTER_NAME}"); then
            ci_echo_error "Upgrade failed ${result}" >&2
            exit 1
          fi

          ci_echo_debug "Command output was '${result}'" >&2

          # If hash the same - than fail deploy
          if echo "${result}" | grep -q 'Module hash [[:alnum:]]+ is already installed'; then
            ci_echo_error "${result}" >&2
            exit 1
          fi
          ci_echo_success "Canister '${CANISTER_NAME}' was upgraded" >&2
