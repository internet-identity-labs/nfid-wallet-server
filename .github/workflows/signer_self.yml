name: SH - Signers
on: 
  workflow_dispatch:
    inputs:
      network_name:
        description: 'Choose applicable network'
        required: true
        type: choice
        options: 
          - dev
          # - ic
      canister_name:
        description: 'Choose applicable canister'
        required: true
        type: choice
        options:
          - ecdsa_signer
          - ecdsa_signer_btc
          - signer_ic
      debug_messages:
        description: 'Show debug messages'
        type: choice
        options: 
          - 'false'
          - 'true'
      confirmation:
        description: 'For the ic deployment - confirm your choice by typing "Yes"'
        type: string

env:
  NETWORK_NAME: ${{ github.event.inputs.network_name }}
  CANISTER_NAME: ${{ github.event.inputs.canister_name }}
  CI_DEBUG: ${{ github.event.inputs.debug_messages }}


jobs:
  Deploy:
    runs-on: [self-hosted, Linux, X64]
    defaults:
      run:
        shell: bash

    steps:
      - name: INPUT => Checks.
        if: ${{ (github.event.inputs.network_name == 'ic') && (github.event.inputs.confirmation != 'Yes') }}
        run: |
          echo "[ERROR] You have try release to network 'ic' without or with wrong confirmation phrase" >&2
          exit 1

      - name: Checkout repo.
        uses: actions/checkout@v3

      - name: Checkout CI repo.
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Cache Cargo dependencies.
        uses: actions/cache@v3
        with:
          path: |
            /home/ubuntu/.cargo/bin/
            /home/ubuntu/.cargo/registry/index/
            /home/ubuntu/.cargo/registry/cache/
            /home/ubuntu/.cargo/git/db/
            /home/ubuntu/.cargo/cargo_target
            target/
          key: ${{ runner.os }}-cargo-${{ github.event.inputs.network_name }}-${{ github.event.inputs.canister_name }}-${{ hashFiles('**/Cargo.lock') }}

      - name: PRE-BUILD => Populate env vars.
        run: |
          source ./ci_libs/CI_LIBS.sh

          ci_echo_debug "Getting values from dfx.json" >&2
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}"); then
            ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          ci_echo_debug "Getting dfx identity for network '${NETWORK_NAME}'" >&2
          if [ "${NETWORK_NAME}" == 'ic' ];then
            ID_NAME="prod_admin"
            IDENTITY_PEM_NAME_VAR="PROD_ADMIN_KEY"
          elif [ "${NETWORK_NAME}" == 'dev' ]; then
            ID_NAME="dev_admin"
            IDENTITY_PEM_NAME_VAR="DEV_ADMIN_KEY"
          fi
          ID_PATH="/home/ubuntu/.config/dfx/identity/${ID_NAME}"

          CANISTER_DID="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.candid")"
          CANISTER_WASM="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.wasm")"
          CANISTER_BRANCH="${GITHUB_REF_NAME////-}"
            
          echo "CANISTER_DID=${CANISTER_DID}" >> $GITHUB_ENV
          echo "CANISTER_WASM=${CANISTER_WASM}" >> $GITHUB_ENV
          echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV
          echo "ID_NAME=${ID_NAME}" >> $GITHUB_ENV
          echo "ID_PATH=${ID_PATH}" >> $GITHUB_ENV
          echo "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >> $GITHUB_ENV
          
          ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
          ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
          ci_echo_info "CANISTER_DID=${CANISTER_DID}" >&2
          ci_echo_info "CANISTER_WASM=${CANISTER_WASM}" >&2
          ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
          ci_echo_info "ID_NAME=${ID_NAME}" >&2
          ci_echo_info "ID_PATH=${ID_PATH}" >&2
          ci_echo_info "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >&2

      - name: PRE-BUILD => Write identity.
        run: |
          mkdir -p "${ID_PATH}"
          echo "${!IDENTITY_PEM_NAME_VAR}" > "${ID_PATH}/identity.pem"
          sed -i 's/\\r\\n/\r\n/g' "${ID_PATH}/identity.pem"
        env:
          PROD_ADMIN_KEY: ${{secrets.PROD_ADMIN_KEY}}
          DEV_ADMIN_KEY: ${{secrets.DEV_ADMIN_KEY}}

      - name: PRE-BUILD => DFX status.
        run: |
          dfx --version

      # - name: BUILD => Show current configuration.
      #   run: |
      #     source ./ci_libs/CI_LIBS.sh

      #     dfx identity use "${ID_NAME}"

      #     ci_echo_debug "dfx canister --network '${NETWORK_NAME}' call '${CANISTER_NAME}' get_config" >&2
      #     dfx canister --network "${NETWORK_NAME}" call "${CANISTER_NAME}" get_config

      - name: BUILD => Build the canister.
        run: |
          source ./ci_libs/CI_LIBS.sh

          dfx identity use "${ID_NAME}"

          rm -rf .dfx;
          ci_echo_debug "dfx build --network '${NETWORK_NAME}' '${CANISTER_NAME}'" >&2
          dfx build --network "${NETWORK_NAME}" "${CANISTER_NAME}"

      - name: DEPLOY => Upgrade the canister.
        run: |
          source ./ci_libs/CI_LIBS.sh

          dfx identity use "${ID_NAME}"

          if [ "${NETWORK_NAME}" == 'ic' ] && [ "${CANISTER_NAME}" == 'identity_manager' ]; then
            ci_echo_warn "Performing PROD canister Upgrade" >&2
            CI_DEBUG="true"
          fi

          ci_echo_debug "dfx canister --network '${NETWORK_NAME}' install --mode upgrade '${CANISTER_NAME}'" >&2
          if ! result=$(dfx canister --network "${NETWORK_NAME}" install --mode upgrade "${CANISTER_NAME}"); then
            ci_echo_error "Upgrade failed ${result}" >&2
            exit 1
          fi

          ci_echo_debug "Command output was '${result}'" >&2

          # If hash the same - than fail deploy
          if echo "${result}" | grep -q 'Module hash [[:alnum:]]+ is already installed'; then
            ci_echo_error "${result}" >&2
            exit 1
          else
            ci_echo_success "Canister '${CANISTER_NAME}' was upgraded" >&2
          fi

      - name: DEPLOY => Reconfig the canister and sync controllers.
        run: |
          source ./ci_libs/CI_LIBS.sh

          dfx identity use "${ID_NAME}"

          if [ "${NETWORK_NAME}" == 'ic' ]; then
            ci_echo_warn "Performing PROD config Update" >&2
            CI_DEBUG="true"
            CANISTER_DATA_NAME_VAR="CANISTER_CONFIG_PROD_DATA"
          else
            CANISTER_DATA_NAME_VAR="CANISTER_CONFIG_DATA"
          fi

          CANISTER_DATA="${!CANISTER_DATA_NAME_VAR}"

          # Reconfig command
          ci_echo_debug "dfx canister --network '${NETWORK_NAME}' call '${CANISTER_NAME}' reconfig '${CANISTER_DATA}'" >&2
          if ! result=$(dfx canister --network "${NETWORK_NAME}" call "${CANISTER_NAME}" reconfig "${CANISTER_DATA}"); then
            ci_echo_error "Configure failed ${result}" >&2
            exit 1
          fi

          ci_echo_debug "Command output was '${result}'" >&2

          # If '()' not found - than fail
          if ! echo "${result}" | grep -q '()'; then
            ci_echo_error "${result}" >&2
            exit 1
          else
            ci_echo_success "${result}" >&2
          fi
          
          # Sync command
          ci_echo_info "Synching controllers for the canister." >&2
          ci_echo_debug "dfx canister --network '${NETWORK_NAME}' call '${CANISTER_NAME}' sync_controllers" >&2
          if ! result=$(dfx canister --network "${NETWORK_NAME}" call "${CANISTER_NAME}" sync_controllers); then
            ci_echo_warn "Synching controllers failed ${result}" >&2
          else
            ci_echo_success "${result}" >&2
          fi

        env:
          CANISTER_CONFIG_DATA: >-
            (
              record {
                im_canister = opt "74gpt-tiaaa-aaaak-aacaa-cai"
              }
            )
          CANISTER_CONFIG_PROD_DATA: >-
            (
              record {
                im_canister = opt "";
              }
            )
