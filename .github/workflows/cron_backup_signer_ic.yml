name: CRON Backup Signer IC
on:
  schedule:
      # Runs "every hour at 40 minutes" (see https://crontab.guru)
      - cron: '40 * * * *'

env:
  NETWORK_NAME: 'ic'
  CANISTER_NAME: 'signer_ic'
  COMPRESS_BACKUP: 'true'
  CI_DEBUG: 'true'

jobs:
  Backup:
    runs-on: [self-hosted, Linux, X64]
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo.
        uses: actions/checkout@v3

      - name: Checkout CI repo.
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      # - name: Cache Cargo dependencies.
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       /home/ubuntu/.cargo/bin/
      #       /home/ubuntu/.cargo/registry/index/
      #       /home/ubuntu/.cargo/registry/cache/
      #       /home/ubuntu/.cargo/git/db/
      #       /home/ubuntu/.cargo/cargo_target/
      #       target/
      #     key: ${{ runner.os }}-cargo-${{ env.NETWORK_NAME }}-${{ env.CANISTER_NAME }}-${{ hashFiles('**/Cargo.lock') }}

      - name: PRE-BACKUP => Populate env vars.
        run: |
          dfx start --background --clean --host 0.0.0.0:8000 &
          source ./ci_libs/CI_LIBS.sh

          ci_echo_debug "Getting values from dfx.json" >&2
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}"); then
            ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          ci_echo_debug "Getting dfx identity for network '${NETWORK_NAME}'" >&2
          if [ "${NETWORK_NAME}" == 'ic' ];then
            ID_NAME="prod_admin"
            IDENTITY_PEM_NAME_VAR="PROD_ADMIN_KEY"
          elif [[ "${NETWORK_NAME}" =~ ^(dev|stage)$ ]]; then
            ID_NAME="dev_admin"
            IDENTITY_PEM_NAME_VAR="DEV_ADMIN_KEY"
          fi
          ID_PATH="/home/ubuntu/.config/dfx/identity/${ID_NAME}"

          ci_echo_debug "Populating env variables" >&2
          CANISTER_DID="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.candid")"
          CANISTER_WASM="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.wasm")"
          CANISTER_BRANCH="${GITHUB_REF_NAME////-}"
            
          echo "CANISTER_DID=${CANISTER_DID}" >> $GITHUB_ENV
          echo "CANISTER_WASM=${CANISTER_WASM}" >> $GITHUB_ENV
          echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV
          echo "ID_NAME=${ID_NAME}" >> $GITHUB_ENV
          echo "ID_PATH=${ID_PATH}" >> $GITHUB_ENV
          echo "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >> $GITHUB_ENV

      - name: PRE-BACKUP => Print Vars.
        run: |
          source ./ci_libs/CI_LIBS.sh
          ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
          ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
          ci_echo_info "CANISTER_DID=${CANISTER_DID}" >&2
          ci_echo_info "CANISTER_WASM=${CANISTER_WASM}" >&2
          ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
          ci_echo_info "ID_NAME=${ID_NAME}" >&2
          ci_echo_info "ID_PATH=${ID_PATH}" >&2
          ci_echo_info "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >&2
          ci_echo_info "COMPRESS_BACKUP=${COMPRESS_BACKUP}" >&2

      - name: PRE-BACKUP => Write identity.
        run: |
          source ./ci_libs/CI_LIBS.sh

          mkdir -p "${ID_PATH}"
          echo "${!IDENTITY_PEM_NAME_VAR}" > "${ID_PATH}/identity.pem"
          sed -i 's/\\r\\n/\r\n/g' "${ID_PATH}/identity.pem"
        env:
          DEV_ADMIN_KEY: ${{secrets.DEV_ADMIN_KEY}}
          PROD_ADMIN_KEY: ${{secrets.PROD_ADMIN_KEY}}

      - name: PRE-BACKUP => DFX status.
        run: |
          dfx --version

      - name: BACKUP => Backup.
        run: |
          source ./ci_libs/CI_LIBS.sh
          source ./ci_libs/canister_backup_restore.sh

          dfx identity use "${ID_NAME}"

          ci_echo_debug "ci_canister_backup '${CANISTER_NAME}' '${NETWORK_NAME}' '${BACKUP_FOLDER}' '${BACKUP_CHUNK_SIZE}' '${COMPRESS_BACKUP}'" >&2
          ci_canister_backup "${CANISTER_NAME}" "${NETWORK_NAME}" "${BACKUP_FOLDER}" "${BACKUP_CHUNK_SIZE}" "${COMPRESS_BACKUP}"
        env:
          BACKUP_FOLDER: /home/ubuntu/backup/
          BACKUP_CHUNK_SIZE: 3000
