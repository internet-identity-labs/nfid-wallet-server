name: Backup
on: 
  workflow_dispatch:
    inputs:
      network_name:
        description: 'Choose applicable network'
        required: true
        type: choice
        options: 
          - dev
          - ic
      canister_name:
        description: 'Choose applicable canister'
        required: true
        type: choice
        options:
          - identity_manager
      debug_messages:
        description: 'Show debug messages'
        type: choice
        options: 
          - 'false'
          - 'true'
      confirmation:
        description: 'For the ic backup - confirm your choice by typing "Yes"'
        type: string

env:
  NETWORK_NAME: ${{ github.event.inputs.network_name }}
  CANISTER_NAME: ${{ github.event.inputs.canister_name }}
  CI_DEBUG: ${{ github.event.inputs.debug_messages }}


jobs:
  Deploy:
    runs-on: [self-hosted, Linux, X64]
    # container:
    #   image: identitylabs/dfxctl:0.10.1-compiled
    defaults:
      run:
        shell: bash

    steps:
      - name: INPUT => Checks.
        if: ${{ (github.event.inputs.network_name == 'ic') && (github.event.inputs.confirmation != 'Yes') }}
        run: |
          echo "[ERROR] You have try release to network 'ic' without or with wrong confirmation phrase" >&2
          exit 1

      - name: DFX => Write identity.
        run: |
          mkdir -p $ID_PATH
          echo $GH_MP_ADMIN_PEM >> $ID_PATH/identity.pem
          sed -i 's/\\r\\n/\r\n/g' $ID_PATH/identity.pem
        env:
          GH_MP_ADMIN_PEM: ${{secrets.GH_MP_ADMIN_PEM}}
          ID_PATH: /home/ubuntu/.config/dfx/identity/gh_mp_admin

      - name: Checkout repo.
        uses: actions/checkout@v3

      - name: Checkout CI repo.
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Cache Cargo dependencies.
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            /cargo
            /cargo_target
            target/
          key: ${{ runner.os }}-cargo-${{ github.event.inputs.network_name }}-${{ github.event.inputs.canister_name }}-${{ hashFiles('**/Cargo.lock') }}

      - name: PRE-BUILD => Populate env vars.
        run: |
          dfx start --background --clean --host 0.0.0.0:8000 &
          source ./ci_libs/CI_LIBS.sh
          # export HOME=/root

          # ci_echo_debug "Installing jq" >&2
          # apt-get update && apt-get install -y --no-install-recommends jq

          ci_echo_debug "Getting values from dfx.json" >&2
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}"); then
            ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          CANISTER_DID="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.candid")"
          CANISTER_WASM="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.wasm")"
          CANISTER_BRANCH="${GITHUB_REF_NAME////-}"
            
          echo "CANISTER_DID=${CANISTER_DID}" >> $GITHUB_ENV
          echo "CANISTER_WASM=${CANISTER_WASM}" >> $GITHUB_ENV
          echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV
          
          ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
          ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
          ci_echo_info "CANISTER_DID=${CANISTER_DID}" >&2
          ci_echo_info "CANISTER_WASM=${CANISTER_WASM}" >&2
          ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
        env:
          DEBIAN_FRONTEND: noninteractive

      - name: BACKUP => Backup.
        run: |
          source ./ci_libs/CI_LIBS.sh
          # export HOME=/root

          CI_DEBUG="true"

          dfx identity use gh_mp_admin

          # Checking path to the BACKUP_FOLDER
          if [ -z "${BACKUP_FOLDER}" ]; then
            ci_echo_error "BACKUP_FOLDER was not provided" >&2
            exit 1
          fi

          # Checking BACKUP_SIZE
          if [ -z "${BACKUP_SIZE}" ]; then
            ci_echo_error "BACKUP_SIZE was not provided" >&2
            exit 1
          fi

          # Create BACKUP_FOLDER and print list of files
          if ! mkdir -p "${BACKUP_FOLDER}"; then
            ci_echo_error "Can't create '${BACKUP_FOLDER}' folder" >&2
            exit 1
          fi

          ci_echo_info "Listing of the '${BACKUP_FOLDER}' folder: " >&2
          ls -lsa "${BACKUP_FOLDER}"

          ci_echo_info "Get amount of anchors" >&2
          ci_echo_debug "dfx canister --network '${NETWORK_NAME}' call '${CANISTER_NAME}' count_anchors" >&2
          if ! result=$(dfx canister --network "${NETWORK_NAME}" call "${CANISTER_NAME}" count_anchors) || [ -z "${result}" ]; then
            ci_echo_error "Command failed - or result is empty" >&2
            exit 1
          fi
          ci_echo_debug "Command output was '${result}'" >&2
          
          # Cleaning result output
          result="$(echo ${result#(} | cut -d' ' -f 1)"
          ci_echo_debug "Result after modification is '${result}'" >&2

          start=0
          saved=0
          iteration=0
          DATE=$(date +%s)
          while [ "${saved}" -lt "${result}" ]; do
            if [ "${iteration}" -eq 0 ]; then
              let "start=BACKUP_SIZE*iteration"
            else
              let "start=BACKUP_SIZE*iteration+1"
            fi
            let "iteration+=1"
            let "end=start+BACKUP_SIZE"

            if [ ${end} -gt ${result} ]; then
              end=${result}
            fi

            ci_echo_info "Iteration ${iteration} - ${start}:${end}" >&2
            BACKUP_FILE="${DATE}-${CANISTER_NAME}-${NETWORK_NAME}-${start}-${end}.json"

            if [ -f "${BACKUP_FOLDER}/${BACKUP_FILE}" ]; then
              ci_echo_error "File '${BACKUP_FOLDER}/${BACKUP_FILE}' already exist." >&2
              exit 1
            fi

            ci_echo_debug "dfx canister --network '${NETWORK_NAME}' call '${CANISTER_NAME}' get_all_accounts_json '(${start}, ${end})'" >&2
            dfx canister --network "${NETWORK_NAME}" call "${CANISTER_NAME}" get_all_accounts_json "(${start}, ${end})" > "${BACKUP_FOLDER}/${BACKUP_FILE}"
            if [ $? -ne 0 ]; then
              ci_echo_error "Command failed" >&2
              exit 1
            fi

            ls -lsa "${BACKUP_FOLDER}/${BACKUP_FILE}"

            let "saved+=BACKUP_SIZE"
          done

          ci_echo_success "Backup action was Success" >&2
          ci_echo_success "Listing of the '${BACKUP_FOLDER}' folder: " >&2
          ls -lsa "${BACKUP_FOLDER}" | grep ${DATE}
        env:
          BACKUP_FOLDER: /home/ubuntu/backup/
          BACKUP_SIZE: 3000


      