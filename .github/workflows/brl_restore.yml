name: BRL - Restore Canister
on: 
  workflow_dispatch:
    inputs:
      source_network_name:
        description: 'Choose applicable network for the source canister'
        required: true
        type: choice
        options: 
          - dev
          - stage
          - ic
      source_canister_name:
        description: 'Choose canister which will be used as a source'
        required: true
        type: choice
        options:
          - identity_manager
          - identity_manager_replica
          - test_im
      destination_network_name:
        description: 'Choose applicable network for the destination canister'
        required: true
        type: choice
        options: 
          - dev
          - stage
          - ic
      destination_canister_name:
        description: 'Choose canister which will be used as a destination'
        required: true
        type: choice
        options:
          - identity_manager
          - identity_manager_replica
          - test_im
      restore_name:
        description: 'Subfolder name which contain specific backup files'
        type: string
      debug_messages:
        description: 'Show debug messages'
        type: choice
        options: 
          - 'false'
          - 'true'
      confirmation:
        description: 'For the ic network - confirm your choice by typing "Yes"'
        type: string

env:
  RESTORE_NAME: ${{ github.event.inputs.restore_name }}
  SOURCE_NETWORK_NAME: ${{ github.event.inputs.source_network_name }}
  SOURCE_CANISTER_NAME: ${{ github.event.inputs.source_canister_name }}
  DESTINATION_NETWORK_NAME: ${{ github.event.inputs.destination_network_name }}
  DESTINATION_CANISTER_NAME: ${{ github.event.inputs.destination_canister_name }}
  CI_DEBUG: ${{ github.event.inputs.debug_messages }}


jobs:
  Restore:
    runs-on:
      group: dfx-backup
    defaults:
      run:
        shell: bash

    steps:
      - name: INPUT => Checks.
        if: ${{ ( (github.event.inputs.source_network_name == 'ic') || (github.event.inputs.destination_network_name == 'ic') ) && (github.event.inputs.confirmation != 'Yes') }}
        run: |
          echo "[ERROR] You have try use network 'ic' without or with wrong confirmation phrase" >&2
          exit 1

      - name: INPUT => Checks.
        if: ${{ github.event.inputs.restore_name == '' }}
        run: |
          echo "[ERROR] You need specify restore_name for restore action" >&2
          exit 1

      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Checkout CI repo.
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          repository: internet-identity-labs/ci_libs
          ref: main
          path: ci_libs

      - name: Versions
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh
          
          ci_versions

      - name: PRE-ACTION => Populate env vars.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          ci_echo_debug "Getting values from dfx.json" >&2
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.${SOURCE_CANISTER_NAME}"); then
            ci_echo_error "Can't found source canister '${SOURCE_CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          if ! canister_data=$(cat dfx.json | jq -er ".canisters.${DESTINATION_CANISTER_NAME}"); then
            ci_echo_error "Can't found destination canister '${DESTINATION_CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          ci_echo_debug "Getting dfx identity for network '${SOURCE_NETWORK_NAME}'" >&2
          if [ "${SOURCE_NETWORK_NAME}" == 'ic' ];then
            ID_NAME="prod_admin"
            IDENTITY_PEM_NAME_VAR="PROD_ADMIN_KEY"
          elif [[ "${SOURCE_NETWORK_NAME}" =~ ^(dev|stage)$ ]]; then
            ID_NAME="dev_admin"
            IDENTITY_PEM_NAME_VAR="DEV_ADMIN_KEY"
          fi
          ID_PATH="/home/ubuntu/.config/dfx/identity/${ID_NAME}"

          echo "ID_NAME=${ID_NAME}" >> $GITHUB_ENV
          echo "ID_PATH=${ID_PATH}" >> $GITHUB_ENV
          echo "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >> $GITHUB_ENV

      - name: PRE-BUILD => Print Vars.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh
          ci_echo_info "RESTORE_NAME=${RESTORE_NAME}" >&2
          ci_echo_info "SOURCE_NETWORK_NAME=${SOURCE_NETWORK_NAME}" >&2
          ci_echo_info "SOURCE_CANISTER_NAME=${SOURCE_CANISTER_NAME}" >&2
          ci_echo_info "DESTINATION_NETWORK_NAME=${DESTINATION_NETWORK_NAME}" >&2
          ci_echo_info "DESTINATION_CANISTER_NAME=${DESTINATION_CANISTER_NAME}" >&2
          ci_echo_info "ID_NAME=${ID_NAME}" >&2
          ci_echo_info "ID_PATH=${ID_PATH}" >&2
          ci_echo_info "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >&2

      - name: PRE-BUILD => Write identity.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh

          mkdir -p "${ID_PATH}"
          echo "${!IDENTITY_PEM_NAME_VAR}" > "${ID_PATH}/identity.pem"
          sed -i 's/\\r\\n/\r\n/g' "${ID_PATH}/identity.pem"
        env:
          DEV_ADMIN_KEY: ${{secrets.DEV_ADMIN_KEY}}
          PROD_ADMIN_KEY: ${{secrets.PROD_ADMIN_KEY}}

      - name: RESTORE => Restore.
        run: |
          source ${{ github.workspace }}/ci_libs/CI_LIBS.sh
          source ./ci_libs/canister_backup_restore.sh

          dfx identity use "${ID_NAME}"

          BACKUP_FILES_PATH="${SOURCE_CANISTER_NAME}/${SOURCE_NETWORK_NAME}/${RESTORE_NAME#/}"
          ci_canister_restore "${DESTINATION_CANISTER_NAME}" "${DESTINATION_NETWORK_NAME}" "${BACKUP_FOLDER}" "${BACKUP_FILES_PATH}"
        env:
          BACKUP_FOLDER: /home/ubuntu/backup/
