name: Deployment
on: workflow_dispatch
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache Cargo dependencies.
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: DFX SETUP | write identity pem
        run: |
          mkdir -p $ID_PATH
          echo $GH_MP_ADMIN_PEM >> $ID_PATH/identity.pem
          sed -i 's/\\r\\n/\r\n/g' $ID_PATH/identity.pem
        shell: bash
        env:
          GH_MP_ADMIN_PEM: ${{secrets.GH_MP_ADMIN_PEM}}
          ID_PATH: /home/runner/.config/dfx/identity/gh_mp_admin

      - name: DFX SETUP  | Provision Linux
        run: bash .github/workflows/dfx-provision-linux.sh

      - name: Install Rust
        run: |
          rustup update 1.57.0 --no-self-update
          rustup default 1.57.0
          rustup target add wasm32-unknown-unknown

      - name: IDENITY MANAGER | Deploy to production
        run: |
          dfx identity use gh_mp_admin
          i=0;
          while :;
          do
            rm -rf .dfx;
            set +e;
            dfx deploy --network ic --no-wallet pub_sub_channel;
            sleep 5;
            ps=$(dfx canister --network ic call pub_sub_channel ping);
            set -e;
            ((i=i+1));
            printf 'Try #%s with result: ps-%s\n' "$i" "$ps";
            [[ 20 -gt $i ]] || exit 255;
            [[ "()" != $ps ]] || break;
          done

          cp ./.dfx/ic/canisters/pub_sub_channel/pub_sub_channel.did.d.ts ./ -f
          cp ./.dfx/ic/canisters/pub_sub_channel/pub_sub_channel.did.js ./ -f

          i=0;
          while :;
          do
            rm -rf .dfx;
            set +e;
            dfx deploy --network ic --no-wallet identity_manager;
            sleep 5;
            im=$(dfx canister --network ic call identity_manager configure '(record {key = blob "${{secrets.KEY}}"; lambda = principal "${{secrets.LAMBDA_PRINCIPAL}}"; token_ttl = ${{secrets.TOKEN_TTL}}; token_refresh_ttl = ${{secrets.TOKEN_REFRESH_TTL}}; whitelisted_phone_numbers = opt vec {${{secrets.WHITELISTED_PHONE_NUMBERS}}} })');
            set -e;
            ((i=i+1));
            printf 'Try #%s with result: im-%s\n' "$i" "$im";
            [[ 20 -gt $i ]] || exit 255;
            [[ "()" != $im ]] || break;
          done

          cp ./.dfx/ic/canisters/identity_manager/identity_manager.did.d.ts ./ -f
          cp ./.dfx/ic/canisters/identity_manager/identity_manager.did.js ./ -f

      - name: Checkout remote frontend repository to frontend directory.
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}
          repository: InternetIdentityLabs/MultipassFrontend
          path: frontend

      - name: Update did files.
        run: |
          cp ./identity_manager.did.d.ts ./frontend/frontend/services/identity-manager/identity_manager.did.d.ts -f
          cp ./identity_manager.did.js ./frontend/frontend/services/identity-manager/identity_manager.did.js -f
          cp ./pub_sub_channel.did.d.ts ./frontend/frontend/services/pub-sub-channel/pub_sub_channel.did.d.ts -f
          cp ./pub_sub_channel.did.js ./frontend/frontend/services/pub-sub-channel/pub_sub_channel.did.js -f

      - name: Create a pull request to remote frontend repository.
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.PAT }}
          commit-message: Update did files.
          title: Update did files.
          branch: update-did-files
          path: frontend
          reviewers: plitzenberger
