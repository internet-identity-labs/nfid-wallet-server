# name: CRON Internet Identity Test
# on:
#   schedule:
#       # Runs "01:05 every day" (see https://crontab.guru)
#       - cron: '05 1 * * *'

# env:
#   NETWORK_NAME: 'dev'
#   CANISTER_NAME: 'internet_identity_test'
#   CI_DEBUG: 'true'


# jobs:
#   Deploy:
#     runs-on: [self-hosted, Linux, X64]
#     defaults:
#       run:
#         shell: bash

#     if: ${{ github.ref == 'refs/heads/master' }}

#     steps:
#       - name: Checkout repo.
#         uses: actions/checkout@v3

#       - name: Checkout CI repo.
#         uses: actions/checkout@v3
#         with:
#           token: ${{ secrets.PAT }}
#           repository: internet-identity-labs/ci_libs
#           ref: main
#           path: ci_libs

#       - name: Cache Cargo dependencies.
#         uses: actions/cache@v3
#         with:
#           path: |
#             /home/ubuntu/.cargo/bin/
#             /home/ubuntu/.cargo/registry/index/
#             /home/ubuntu/.cargo/registry/cache/
#             /home/ubuntu/.cargo/git/db/
#             /home/ubuntu/.cargo/cargo_target
#             target/
#           key: ${{ runner.os }}-cargo-dev-identity_manager_test-${{ hashFiles('**/Cargo.lock') }}

#       - name: PRE-BUILD => Populate env vars.
#         run: |
#           source ./ci_libs/CI_LIBS.sh

#           ci_echo_debug "Getting values from dfx.json" >&2
#           if ! canister_data=$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}"); then
#             ci_echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
#             exit 1
#           fi

#           ci_echo_debug "Getting dfx identity for network '${NETWORK_NAME}'" >&2
#           if [ "${NETWORK_NAME}" == 'ic' ];then
#             ID_NAME="prod_admin"
#             IDENTITY_PEM_NAME_VAR="PROD_ADMIN_KEY"
#           elif [ "${NETWORK_NAME}" == 'dev' ]; then
#             ID_NAME="dev_admin"
#             IDENTITY_PEM_NAME_VAR="DEV_ADMIN_KEY"
#           fi
#           ID_PATH="/home/ubuntu/.config/dfx/identity/${ID_NAME}"

#           CANISTER_DID="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.candid")"
#           CANISTER_WASM="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.wasm")"
#           CANISTER_BRANCH="${GITHUB_REF_NAME////-}"
            
#           echo "CANISTER_DID=${CANISTER_DID}" >> $GITHUB_ENV
#           echo "CANISTER_WASM=${CANISTER_WASM}" >> $GITHUB_ENV
#           echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV
#           echo "ID_NAME=${ID_NAME}" >> $GITHUB_ENV
#           echo "ID_PATH=${ID_PATH}" >> $GITHUB_ENV
#           echo "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >> $GITHUB_ENV
          
#       - name: PRE-BUILD => Print Vars.
#         run: |
#           source ./ci_libs/CI_LIBS.sh

#           ci_echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
#           ci_echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
#           ci_echo_info "CANISTER_DID=${CANISTER_DID}" >&2
#           ci_echo_info "CANISTER_WASM=${CANISTER_WASM}" >&2
#           ci_echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
#           ci_echo_info "ID_NAME=${ID_NAME}" >&2
#           ci_echo_info "ID_PATH=${ID_PATH}" >&2
#           ci_echo_info "IDENTITY_PEM_NAME_VAR=${IDENTITY_PEM_NAME_VAR}" >&2

#       - name: PRE-BUILD => Write identity.
#         run: |
#           mkdir -p "${ID_PATH}"
#           echo "${!IDENTITY_PEM_NAME_VAR}" > "${ID_PATH}/identity.pem"
#           sed -i 's/\\r\\n/\r\n/g' "${ID_PATH}/identity.pem"
#         env:
#           PROD_ADMIN_KEY: ${{secrets.PROD_ADMIN_KEY}}
#           DEV_ADMIN_KEY: ${{secrets.DEV_ADMIN_KEY}}

#       - name: PRE-BUILD => DFX status.
#         run: |
#           dfx --version

#       - name: BUILD => Build the canister.
#         run: |
#           source ./ci_libs/CI_LIBS.sh

#           dfx identity use "${ID_NAME}"

#           rm -rf .dfx;
#           ci_echo_debug "dfx build --network '${NETWORK_NAME}' '${CANISTER_NAME}'" >&2
#           dfx build --network "${NETWORK_NAME}" "${CANISTER_NAME}"

#       - name: DEPLOY => Upgrade the canister.
#         run: |
#           source ./ci_libs/CI_LIBS.sh

#           dfx identity use "${ID_NAME}"

#           ci_echo_debug "dfx canister --network '${NETWORK_NAME}' install --mode upgrade '${CANISTER_NAME}'" >&2
#           if ! result=$(dfx canister --network "${NETWORK_NAME}" install --mode upgrade "${CANISTER_NAME}"); then
#             ci_echo_error "Upgrade failed ${result}" >&2
#             exit 1
#           fi

#           ci_echo_debug "Command output was '${result}'" >&2

#           # If hash the same - than fail deploy
#           if echo "${result}" | grep -q 'Module hash [[:alnum:]]+ is already installed'; then
#             ci_echo_error "${result}" >&2
#             exit 1
#           else
#             ci_echo_success "Canister '${CANISTER_NAME}' was upgraded" >&2
#           fi
