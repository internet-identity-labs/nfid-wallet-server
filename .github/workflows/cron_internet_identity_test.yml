name: CRON Identity Identity Test
on:
  schedule:
      # Runs "01:05 every day" (see https://crontab.guru)
      - cron: '05 1 * * *'

env:
  NETWORK_NAME: 'dev'
  CANISTER_NAME: 'internet_identity_test'
  DEBUG: 'true'

jobs:
  Deploy:
    runs-on: ubuntu-latest
    container:
      image: identitylabs/dfxctl:0.10.1-compiled
    defaults:
      run:
        shell: bash

    if: ${{ (github.ref == 'refs/heads/master') }}

    steps:
      - name: DFX => Write identity.
        run: |
          mkdir -p $ID_PATH
          echo $GH_MP_ADMIN_PEM >> $ID_PATH/identity.pem
          sed -i 's/\\r\\n/\r\n/g' $ID_PATH/identity.pem
        env:
          GH_MP_ADMIN_PEM: ${{secrets.GH_MP_ADMIN_PEM}}
          ID_PATH: /root/.config/dfx/identity/gh_mp_admin

      - name: DFX => Start.
        run: |
          dfx_run &
          sleep 60
        working-directory: /default_project
        env:
          HOME: /root

      - name: Checkout repo.
        uses: actions/checkout@v3

      - name: Cache Cargo dependencies.
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            /cargo
            /cargo_target
            target/
          key: ${{ runner.os }}-cargo-dev-identity_manager_test-${{ hashFiles('**/Cargo.lock') }}

      - name: PRE-BUILD => Populate env vars.
        run: |
          source .github/workflows/CI_LIBS.sh
          export HOME=/root

          echo_debug "Installing jq"
          apt-get update && apt-get install -y --no-install-recommends jq

          echo_debug "Getting values from dfx.json"
          if ! canister_data=$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}"); then
            echo_error "Can't found canister '${CANISTER_NAME}' data from dfx.json" >&2
            exit 1
          fi

          CANISTER_DID="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.candid")"
          CANISTER_WASM="$(cat dfx.json | jq -er ".canisters.${CANISTER_NAME}.wasm")"
          CANISTER_BRANCH="${GITHUB_REF_NAME////-}"
            
          echo "CANISTER_DID=${CANISTER_DID}" >> $GITHUB_ENV
          echo "CANISTER_WASM=${CANISTER_WASM}" >> $GITHUB_ENV
          echo "CANISTER_BRANCH=${CANISTER_BRANCH}" >> $GITHUB_ENV
          
          echo_info "NETWORK_NAME=${NETWORK_NAME}" >&2
          echo_info "CANISTER_NAME=${CANISTER_NAME}" >&2
          echo_info "CANISTER_DID=${CANISTER_DID}" >&2
          echo_info "CANISTER_WASM=${CANISTER_WASM}" >&2
          echo_info "CANISTER_BRANCH=${CANISTER_BRANCH}" >&2
        env:
          DEBIAN_FRONTEND: noninteractive

      - name: BUILD => Build the canister.
        run: |
          source .github/workflows/CI_LIBS.sh
          export HOME=/root

          dfx identity use gh_mp_admin

          rm -rf .dfx;
          echo_debug "dfx build --network '${NETWORK_NAME}' '${CANISTER_NAME}'" >&2
          dfx build --network "${NETWORK_NAME}" "${CANISTER_NAME}"

      - name: DEPLOY => Upgrade the canister.
        run: |
          source .github/workflows/CI_LIBS.sh
          export HOME=/root

          dfx identity use gh_mp_admin

          echo_debug "dfx canister --network '${NETWORK_NAME}' install --mode upgrade '${CANISTER_NAME}'" >&2
          if ! result=$(dfx canister --network "${NETWORK_NAME}" install --mode upgrade "${CANISTER_NAME}"); then
            echo_error "Upgrade failed ${result}" >&2
            exit 1
          fi

          echo_debug "Command output was '${result}'" >&2

          # If hash the same - than fail deploy
          if echo "${result}" | grep -q 'Module hash [[:alnum:]]+ is already installed'; then
            echo_error "${result}" >&2
            exit 1
          else
            echo_success "Canister '${CANISTER_NAME}' was upgraded" >&2
          fi
